
### Paint 深入学习: 

	* Paint 的 API 分: 
		- 颜色
		- 效果
		- drawText() 相关
		- 初始化

## PorterDuff.Mode：用来指定两个图像共同绘制时的颜色策略：https://developer.android.google.cn/reference/android/graphics/PorterDuff.Mode.html
	* 在 Paint 一共有三处 API：
		- ComposeShader ：混和两个 Shader
		- PorterDuffColorFilter ：增加一个单色的 ColorFliter
		- XferMode ：增加绘制内容和已有内容的混合计算方式

	- Alpha 合成 ：Alpha Compositing，其实就是 「PorterDuff」 这个词所指代的算法
		：SRC, SRC_OVER, SRC_IN, SRC_OUT, SRC_ATOP, DST_OVER, DST, DST_IN, DST_OUT, DST_ATOP, CLEAR, XOR(Exclusive Or)

	- 混合 (Blending): 也就是 Photoshop 等制图软件里都有的那些混合模式（multiply  darken lighten 之类的）。这一类操作的是颜色本身而不是 Alpha 通道，并不属于 Alpha 合成
		：DARKEN, LIGHTEN, MULTIPLY, SCREEN, OVERLAY


## 1. 颜色: Canvas 绘制的内容, 有三层对颜色的处理：基本颜色 --> ColorFilter --> XferMode
	
	# 基本颜色：

		* 直接设置颜色：setColor(int color)；setARGB(int a, int r, int g, int b)；setARGB(...)

		* Shader 着色器：setShader(Shader shader)
			- Shader ：着色器是图形领域里一个通用的概念，它和直接设置颜色的区别是，着色器设置的是一个颜色方案，或者说是一套着色规则。当设置了 Shader 之后，Paint 在绘制图形和文字时就不使用  setColor/ARGB() 设置的颜色了，而是使用 Shader 的方案中的颜色

			- LinearGradient：线性渐变：设置两个点和两种颜色，以这两个点作为端点，使用两种颜色的渐变来绘制颜色
				构造：LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile)
				参数： x0 y0 x1 y1：	渐变的两个端点的位置 ；
					   color0 color1： 	是端点的颜色 ；
					   tile： 			端点范围之外的着色规则，类型是 TileMode。

				* TileMode ：
					- CLAMP   会在端点之外延续端点处的颜色；
					- MIRROR  镜像模式；
					- REPEAT  重复模式。

			-  RadialGradient：辐射渐变：从中心向周围辐射状的渐变
				构造：RadialGradient(float centerX, float centerY, float radius, int centerColor, int edgeColor, TileMode tileMode)
				参数： centerX centerY：辐射中心的坐标 
					   radius：			辐射半径 
					   centerColor：	辐射中心的颜色 
					   edgeColor：		辐射边缘的颜色 
					   tileMode：		辐射范围之外的着色模式。

			- SweepGradient：扫描渐变
				构造：SweepGradient(float cx, float cy, int color0, int color1)
				参数： 
					cx cy  ：扫描的中心 
					color0 ：扫描的起始颜色 
					color1 ：扫描的终止颜色

			- BitmapShader：用 Bitmap 的像素来作为图形或文字的填充
				构造方法： BitmapShader(Bitmap bitmap, Shader.TileMode tileX, Shader.TileMode tileY)
				参数： 
					bitmap ：用来做模板的 Bitmap 对象 
					tileX ： 横向的 TileMode 
					tileY ： 纵向的 TileMode。

			- ComposeShader：混合着色器
				构造方法：ComposeShader(Shader shaderA, Shader shaderB, PorterDuff.Mode mode)
				参数： 
					shaderA, shaderB：两个相继使用的 Shader 
					mode: 两个 Shader 的叠加模式，即 shaderA 和 shaderB 应该怎样共同绘制。类型是 PorterDuff.Mode 

	# setColorFilter(ColorFilter colorFilter)：为绘制设置颜色过滤。颜色过滤的意思，就是为绘制的内容设置一个统一的过滤策略，然后 Canvas.drawXXX() 方法会对每个像素都进行过滤后再绘制出来

		* LightingColorFilter(int mul, int add) ：模拟简单的光照效果
			参数：mul 和 add 都是和颜色值格式相同的 int 值，其中 mul 用来和目标像素相乘，add 用来和目标像素相加
			计算过程：
				R' = R * mul.R / 0xff + add.R  
				G' = G * mul.G / 0xff + add.G  
				B' = B * mul.B / 0xff + add.B  
			例子：
				1. 一个「保持原样」的「基本 LightingColorFilter 」，mul 为 0xffffff，add 为 0x000000（也就是0），那么对于一个像素它的计算过程就是：
				R' = R * 0xff / 0xff + 0x0 = R 	// R' = R  
				G' = G * 0xff / 0xff + 0x0 = G 	// G' = G  
				B' = B * 0xff / 0xff + 0x0 = B 	// B' = B  
				
				2. 基于这个「基本 LightingColorFilter 」，你就可以修改一下做出其他的 filter。比如，如果你想去掉原像素中的红色，可以把它的 mul 改为 0x00ffff （红色部分为 0 ） ，那么它的计算过程就是：

				R' = R * 0x0  / 0xff + 0x0 = 0 	// 红色被移除  
				G' = G * 0xff / 0xff + 0x0 = G  
				B' = B * 0xff / 0xff + 0x0 = B  

				3. 或者，如果你想让它的绿色更亮一些，就可以把它的 add 改为 0x003000 （绿色部分为 0x30 ），那么它的计算过程就是：

				R' = R * 0xff / 0xff + 0x0 = R  
				G' = G * 0xff / 0xff + 0x30 = G + 0x30 	// 绿色被加强  
				B' = B * 0xff / 0xff + 0x0 = B  

		* PorterDuffColorFilter(int color, PorterDuff.Mode mode)：使用一个指定的颜色和一种指定的 PorterDuff.Mode 来与绘制对象进行合成。和 ComposeShader 不同的是，PorterDuffColorFilter 作为一个 ColorFilter，只能指定一种颜色作为源，而不是一个 Bitmap

		* ColorMatrixColorFilter：使用一个 ColorMatrix 来对颜色进行处理
			- ColorMatrix 这个类，内部是一个 4x5 的矩阵：
				[ a, b, c, d, e,
				  f, g, h, i, j,
				  k, l, m, n, o,
				  p, q, r, s, t ]
			  对于颜色 [R, G, B, A] ，转换算法是这样的：
				R’ = a*R + b*G + c*B + d*A + e;  
				G’ = f*R + g*G + h*B + i*A + j;  
				B’ = k*R + l*G + m*B + n*A + o;  
				A’ = p*R + q*G + r*B + s*A + t;  

			- ColorMatrix 有一些自带的方法可以做简单的转换，例如可以使用 setSaturation(float sat) 来设置饱和度；另外你也可以自己去设置它的每一个元素来对转换效果做精细调整

	# setXfermode(Xfermode xfermode)：Xfermode 指的是你要绘制的内容和 Canvas 的目标位置的内容应该怎样结合计算出最终的颜色。
		通俗地说：其实就是要你以绘制的内容作为源图像，以 View 中已有的内容作为目标图像，选取一个  PorterDuff.Mode 作为绘制内容的颜色处理方案
		例子： 
			Xfermode xfermode = new PorterDuffXfermode(PorterDuff.Mode.DST_IN);
			...
			canvas.drawBitmap(rectBitmap, 0, 0, paint);   // 画方  
			paint.setXfermode(xfermode);  // 设置 Xfermode  
			canvas.drawBitmap(circleBitmap, 0, 0, paint);  // 画圆  
			paint.setXfermode(null);  // 用完及时清除 Xfermode 

		* 注意：
		 1. 使用离屏缓冲（Off-screen Buffer）：要想使用 setXfermode() 正常绘制，必须使用离屏缓存 (Off-screen Buffer) 把内容绘制在额外的层上，再把绘制好的内容贴回 View 中。
		 用两种设置方法，如果没有特殊需求，可以选用第一种方法 Canvas.saveLayer() 来设置离屏缓冲
		 	- Canvas.saveLayer()：可以做短时的离屏缓冲。使用方法很简单，在绘制代码的前后各加一行代码，在绘制之前保存，绘制之后恢复
		 		例子：
		 		  int saved = canvas.saveLayer(null, null, Canvas.ALL_SAVE_FLAG);
				  canvas.drawBitmap(rectBitmap, 0, 0, paint);  // 画方
				  paint.setXfermode(xfermode);  // 设置 Xfermode
				  canvas.drawBitmap(circleBitmap, 0, 0, paint);  // 画圆
				  paint.setXfermode(null);  // 用完及时清除 Xfermode
				  canvas.restoreToCount(saved);

			- View.setLayerType()：是直接把整个 View 都绘制在离屏缓冲中。
				setLayerType(LAYER_TYPE_HARDWARE) 是使用 GPU 来缓冲， 
				setLayerType(LAYER_TYPE_SOFTWARE) 是直接直接用一个 Bitmap 来缓冲

		 2. 控制好透明区域：使用 Xfermode 来绘制的内容，咬注意控制它的透明区域不要太小，要让它足够覆盖到要和它结合绘制的内容

## 2. 效果
	* Paint.setAntiAlias (boolean aa) 设置抗锯齿

	* setStyle(Paint.Style style)

	* 线条形状：
		- setStrokeWidth(float width)：
			PS：线条宽度 0 和 1 的区别：
				例如 2 像素宽度的线条在 Canvas 放大 2 倍后会被以 4 像素宽度来绘制。而当线条宽度被设置为 0 时，它的宽度就被固定为 1 像素，就算 Canvas 通过几何变换被放大，它也依然会被以 1 像素宽度来绘制。Google 在文档中把线条宽度为 0 时称作「hairline mode（发际线模式）」

		- setStrokeCap(Paint.Cap cap)：BUTT 平头、ROUND 圆头、SQUARE 方头。默认为 BUTT。

		- setStrokeJoin(Paint.Join join)：设置拐角的形状。MITER 尖角、 BEVEL 平角、 ROUND 圆角。默认为 MITER。

		- setStrokeMiter(float miter)：是对于 setStrokeJoin() 的一个补充，它用于设置 MITER 型拐角的延长线的最大值。
			所谓「延长线的最大值」：当线条拐角为 MITER 时，拐角处的外缘需要使用延长线来补偿。如果拐角的角度太小，就有可能由于出现连接点过长的情况。为避免意料之外过长的尖角出现，当尖角过长时，自动改用  BEVEL 的方式来渲染连接点

			参数： miter，用来控制多尖需要转为使用 BEVEL 来绘制，具体指尖角的外缘端点和内部拐角的距离与线条宽度的比。默认值是 4，对应的是一个大约 29° 的锐角：

	* 色彩优化：
		- setDither(boolean dither)：设置是否开启图形的抖动来优化色彩深度降低时的绘制效果
			是指把图像从较高色彩深度（即可用的颜色数）向较低色彩深度的区域绘制时，在图像中有意地插入噪点，通过有规律地扰乱图像来让图像对于肉眼更加真实的做法。在实际的应用场景中，抖动更多的作用是在图像降低色彩深度绘制时，避免出现大片的色带与色块

			PS：不过对于现在（2017年）而言， setDither(dither) 已经没有当年那么实用了，因为现在的 Android 版本的绘制，默认的色彩深度已经是 32 位的 ARGB_8888 ，效果已经足够清晰了。只有当你向自建的 Bitmap 中绘制，并且选择 16 位色的 ARGB_4444 或者 RGB_565 的时候，开启它才会有比较明显的效果。

		- setFilterBitmap(boolean filter)：设置是否开启双线性过滤来优化 Bitmap 放大绘制的效果。
			图像在放大绘制的时候，默认使用的是最近邻插值过滤，这种算法简单，但会出现马赛克现象；而如果开启了双线性过滤，就可以让结果图像显得更加平滑

	* Paint.setPathEffect(PathEffect effect)：给图形的轮廓设置效果。对 Canvas 所有的图形绘制有效，也就是 drawLine() drawCircle() drawPath() 这些方法。
		PathEffect 分为两类： 单一效果的 CornerPathEffect DiscretePathEffect DashPathEffect PathDashPathEffect ，和组合效果的 SumPathEffect ComposePathEffect

		* PS注意：PathEffect 在有些情况下不支持硬件加速，需要关闭硬件加速才能正常使用：
			- Canvas.drawLine() 和 Canvas.drawLines() 方法画直线时，setPathEffect() 是不支持硬件加速的；
			- PathDashPathEffect 对硬件加速的支持也有问题，所以当使用 PathDashPathEffect 的时候，最好也把硬件加速关了。

		- CornerPathEffect(float radius)：把所有拐角变成圆角。参数 radius 是圆角的半径。

		- DiscretePathEffect(float segmentLength, float deviation)：把线条进行随机的偏离，让轮廓变得乱七八糟。
			具体实现：是把绘制改为使用定长的线段来拼接，并且在拼接的时候对路径进行随机偏离
			参数：segmentLength 是用来拼接的每个线段的长度， deviation 是偏离量

		- DashPathEffect(float[] intervals, float phase)：用虚线来绘制线条
			参数：
			 intervals ：是一个数组，它指定了虚线的格式：数组中元素必须为偶数（最少是 2 个），按照「画线长度、空白长度、画线长度、空白长度」……的顺序排列，例如上面代码中的 20, 5, 10, 5 就表示虚线是按照「画 20 像素、空 5 像素、画 10 像素、空 5 像素」的模式来绘制；
			 phase ：是虚线的偏移量

		- PathDashPathEffect(Path shape, float advance, float phase, PathDashPathEffect.Style style)：使用一个 Path 来绘制「虚线」
			参数：
			 shape ：参数是用来绘制的 Path ；
			 advance ：是两个相邻的 shape 段之间的间隔，不过注意，这个间隔是两个 shape 段的起点的间隔，而不是前一个的终点和后一个的起点的距离；
			 phase ：虚线的偏移；
			 style ：用来指定拐弯改变的时候 shape 的转换方式。类型是 PathDashPathEffect.Style ：RANSLATE：位移， ROTATE：旋转， MORPH：变体

		- SumPathEffect(PathEffect effect1, PathEffect effect2)：分别按照两种 PathEffect 分别对目标进行绘制，分别绘制出两个PathEffect对应的图形。

		- ComposePathEffect(PathEffect outerpe, PathEffect innerpe)：先对目标 Path 使用一个 PathEffect，然后再对这个改变后的 Path 使用另一个 PathEffect。innerpe 是先应用的， outerpe 是后应用的

	* setShadowLayer(float radius, float dx, float dy, int shadowColor)：在之后的绘制内容下面加一层阴影。clearShadowLayer()：清除阴影层
		参数：radius 是阴影的模糊范围； dx dy 是阴影的偏移量； shadowColor 是阴影的颜色。
		注意：
			1. 在硬件加速开启的情况下， setShadowLayer() 只支持文字的绘制，文字之外的绘制必须关闭硬件加速才能正常绘制阴影。
			2. 如果 shadowColor 是半透明的，阴影的透明度就使用 shadowColor 自己的透明度；而如果 shadowColor 是不透明的，阴影的透明度就使用 paint 的透明度。

	* setMaskFilter(MaskFilter maskfilter)：设置在绘制层上方的附加效果（setShadowLayer()是在绘制内容下层）
		PS：setColorFilter(filter) ，是对每个像素的颜色进行过滤；而这里的 setMaskFilter(filter) 则是基于整个画面来进行过滤。

		- BlurMaskFilter(float radius, BlurMaskFilter.Blur style)：模糊效果的 MaskFilter
			参数：
			 radius 参数是模糊的范围，  
			 style 是模糊的类型，一共有四种：
				NORMAL: 内外都模糊绘制
				SOLID: 内部正常绘制，外部模糊
				INNER: 内部模糊，外部不绘制
				OUTER: 内部不绘制，外部模糊

		- EmbossMaskFilter(float[] direction, float ambient, float specular, float blurRadius)：浮雕效果的 MaskFilter
			参数：
			 direction 是一个 3 个元素的数组，指定了光源的方向； 
			 ambient 是环境光的强度，数值范围是 0 到 1； 
			 specular 是炫光的系数； 
			 blurRadius 是应用光线的范围。

	* 获取绘制的 Path：是效果类唯一的一组 get 方法。归类到「效果」类方法，主要是用于图形和文字的装饰效果的位置计算，比如自定义的下划线效果。
		- getFillPath(Path src, Path dst)：指 drawPath() 的绘制内容的轮廓，要算上线条宽度和设置的 PathEffect
			解释：默认情况下（线条宽度为 0、没有 PathEffect），原 Path 和实际 Path 是一样的；而在线条宽度不为 0 （并且模式为 FILL 模式或 FLL_AND_STROKE ），或者设置了 PathEffect 的时候，实际 Path 就和原 Path 不一样了。
			参数：src 是原 Path ，而 dst 就是实际 Path 的保存位置。 getFillPath(src, dst) 会计算出实际 Path，然后把结果保存在 dst 里。

		- getTextPath(String text, int start, int end, float x, float y, Path path) / ：获取的就是目标文字所对应的 Path 
		  getTextPath(char[] text, int index, int count, float x, float y, Path path)
		  	解释：文字的绘制，虽然是使用 Canvas.drawText() 方法，其实文字信息全是被转化成图形，对图形进行绘制的

## drawText() 相关：文字的绘制相关，设置文字的大小、间隔、效果等

## 初始化类：
	* reset()：重置 Paint 的所有属性为默认值。相当于重新 new 一个，性能当然高一些。

	* set(Paint src)：把 src 的所有属性全部复制过来。相当于调用 src 所有的 get 方法，然后调用这个 Paint 的对应的 set 方法来设置它们。

	* setFlags(int flags)：批量设置 flags。相当于依次调用它们的 set 方法。例如：paint.setFlags(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);  
		- setFlags(flags) 对应的 get 方法是 int getFlags()。

